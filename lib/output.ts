// Generated by https://quicktype.io

export interface WarframeParser {
    timestamp:            string;
    news:                 News[];
    events:               Event[];
    alerts:               Alert[];
    sortie:               Sortie;
    syndicateMissions:    SyndicateMission[];
    fissures:             Fissure[];
    globalUpgrades:       any[];
    flashSales:           FlashSale[];
    invasions:            Invasion[];
    darkSectors:          DarkSector[];
    voidTrader:           VoidTrader;
    dailyDeals:           DailyDeal[];
    simaris:              Simaris;
    conclaveChallenges:   ConclaveChallenge[];
    persistentEnemies:    any[];
    earthCycle:           EarthCycle;
    cetusCycle:           CetusCycle;
    constructionProgress: ConstructionProgress;
  }
  
  export interface Alert {
    id:          string;
    activation:  string;
    expiry:      string;
    mission:     Mission;
    expired:     boolean;
    eta:         string;
    rewardTypes: string[];
  }
  
  export interface Mission {
    node:             string;
    type:             string;
    faction:          Faction;
    reward:           Reward;
    minEnemyLevel:    number;
    maxEnemyLevel:    number;
    nightmare:        boolean;
    archwingRequired: boolean;
  }
  
  export enum Faction {
    Corpus = 'Corpus',
    Grineer = 'Grineer',
    Infested = 'Infested',
  }
  
  export interface Reward {
    items:        string[];
    countedItems: CountedItem[];
    credits:      number;
    asString:     string;
    itemString:   string;
    thumbnail:    string;
    color:        number;
  }
  
  export interface CountedItem {
    count: number;
    type:  string;
  }
  
  export interface CetusCycle {
    id:          string;
    expiry:      string;
    isDay:       boolean;
    timeLeft:    string;
    isCetus:     boolean;
    shortString: string;
  }
  
  export interface ConclaveChallenge {
    id:            string;
    description:   string;
    expiry:        string;
    amount:        number;
    mode:          string;
    category:      Category;
    eta:           String;
    expired:       boolean;
    daily:         boolean;
    rootChallenge: boolean;
    endString:     String;
    asString:      string;
  }
  
  export enum Category {
    Day = 'day',
    Week = 'week',
    WeekRoot = 'week_root',
  }
  
  export interface ConstructionProgress {
    id:                string;
    fomorianProgress:  string;
    razorbackProgress: string;
    unknownProgress:   string;
  }
  
  export interface DailyDeal {
    item:          string;
    expiry:        string;
    originalPrice: number;
    salePrice:     number;
    total:         number;
    sold:          number;
    id:            string;
    eta:           string;
    discount:      number;
  }
  
  export interface DarkSector {
    id:                           string;
    isAlliance:                   boolean;
    defenderName:                 string;
    defenderDeployemntActivation: number;
    defenderMOTD:                 string;
    deployerName:                 string;
    deployerClan?:                string;
    history:                      any[];
  }
  
  export interface EarthCycle {
    id:       string;
    expiry:   string;
    isDay:    boolean;
    timeLeft: string;
  }
  
  export interface Event {
    id:              string;
    expiry:          string;
    maximumScore:    number;
    faction:         Faction;
    description:     string;
    node:            string;
    concurrentNodes: any[];
    victimNode:      string;
    scoreLocTag:     string;
    rewards:         Reward[];
    expired:         boolean;
    health:          string;
    asString:        string;
  }
  
  export interface Fissure {
    id:          string;
    node:        string;
    missionType: string;
    enemy:       Faction;
    tier:        string;
    tierNum:     number;
    activation:  string;
    expiry:      string;
    expired:     boolean;
    eta:         string;
  }
  
  export interface FlashSale {
    item:            string;
    expiry:          string;
    discount:        number;
    premiumOverride: number;
    isFeatured:      boolean;
    isPopular:       boolean;
    id:              string;
    expired:         boolean;
    eta:             String;
  }
  
  export interface Invasion {
    id:               string;
    node:             string;
    desc:             string;
    attackerReward:   Reward;
    attackingFaction: Faction;
    defenderReward:   Reward;
    defendingFaction: Faction;
    vsInfestation:    boolean;
    activation:       string;
    count:            number;
    requiredRuns:     number;
    completion:       number;
    completed:        boolean;
    eta:              string;
    rewardTypes:      string[];
  }
  
  export interface News {
    id:           string;
    message:      string;
    link:         string;
    imageLink:    string;
    priority:     boolean;
    date:         string;
    eta:          string;
    update:       boolean;
    primeAccess:  boolean;
    stream:       boolean;
    translations: Translations;
    asString:     string;
  }
  
  export interface Translations {
    es?: string;
    en?: string;
    fr?: string;
    it?: string;
    de?: string;
    pt?: string;
    ru?: string;
    pl?: string;
    tr?: string;
    ja?: string;
    zh?: string;
    ko?: string;
    tc?: string;
  }
  
  export interface Simaris {
    target:         string;
    isTargetActive: boolean;
    asString:       string;
  }
  
  export interface Sortie {
    id:         string;
    activation: string;
    expiry:     string;
    rewardPool: string;
    variants:   Variant[];
    boss:       string;
    faction:    Faction;
    expired:    boolean;
    eta:        String;
  }
  
  export interface Variant {
    boss:                string;
    planet:              string;
    missionType:         string;
    modifier:            string;
    modifierDescription: string;
    node:                string;
  }
  
  export interface SyndicateMission {
    id:         string;
    activation: string;
    expiry:     string;
    syndicate:  string;
    nodes:      string[];
    jobs:       Job[];
    eta:        String;
  }
  
  export interface Job {
    id:             string;
    rewardPool:     string[];
    type:           string;
    enemyLevels:    number[];
    standingStages: number[];
  }
  
  export interface VoidTrader {
    id:          string;
    activation:  string;
    expiry:      string;
    character:   string;
    location:    string;
    inventory:   any[];
    psId:        string;
    active:      boolean;
    startString: string;
    endString:   string;
  }
  